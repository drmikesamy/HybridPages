@using HybridPages.Client.State;
@using HybridPages.Shared.Enums;
@using HybridPages.Shared.Helpers;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject PageService _pageService

<nav class="primary-nav">
	<div class="primary-nav-left">
		<h1>@UniqueName</h1>
	</div>
	<div class="primary-nav-right">
		<nav class="horizontal-scroll-menu">
			<ul>
				<AuthorizeView>
					<Authorized>
						<li><NavLink Match="NavLinkMatch.All" href="@(UniqueName+"/settings")">Page Settings</NavLink></li>
						<li><NavLink Match="NavLinkMatch.All" href="" @onclick="BeginLogOut">Log Out</NavLink></li>
					</Authorized>
					<NotAuthorized>
						<li><NavLink Match="NavLinkMatch.All" href="authentication/register">Register</NavLink></li>
						<li><NavLink Match="NavLinkMatch.All" href="authentication/login">Log in</NavLink></li>
					</NotAuthorized>
				</AuthorizeView>
			</ul>
		</nav>
		<LoginDisplay />
	</div>
</nav>
<div class="background-container" style="@_backgroundMeshCss">
	@Body
</div>

@code {
	public string? UniqueName { get; set; }
	private string _backgroundMeshCss { get; set; } = string.Empty;

	protected override async void OnParametersSet()
	{
		object uniqueName = null;
		if ((this.Body.Target as RouteView)?.RouteData.RouteValues?.TryGetValue("UniqueName", out uniqueName) == true)
		{
			UniqueName = uniqueName?.ToString();
			if (_pageService.Page != null)
			{
				if (_pageService.Page?.Style?.BackgroundType == BackgroundTypeEnum.Mesh && _pageService.Page?.Style?.BackgroundMesh != null)
					_backgroundMeshCss = BackgroundMeshToCss.GetBackgroundMeshCss(_pageService.Page.Style.BackgroundMesh);
			}
		}
	}

	private void BeginLogOut()
	{
		Navigation.NavigateToLogout("authentication/logout");
	}
}
