@page "/"
@page "/{UniqueName}"
@using System.Text.RegularExpressions;
@using HybridPages.Client.Shared.EditorComponents
@using HybridPages.Client.Shared.LayoutComponents
@using HybridPages.Client.State;
@using HybridPages.Shared.Enums;
@using HybridPages.Shared.Helpers;
@using HybridPages.Shared.Interfaces;
@using HybridPages.Shared.Models;
@using HybridPages.Shared.Models.Styling;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json;
@inject NavigationManager NavManager
@inject PageService _pageService
@if (_showBackgroundDesigner == true)
{
	<BackgroundDesigner backgroundMesh=@_pageService.Page?.Style?.BackgroundMesh onSaveClicked="b => HideBackgroundDesigner(b)"></BackgroundDesigner>
}
<PageTitle>Index</PageTitle>
<div class="background-container" style="@_backgroundMeshCss"></div>
<nav class="primary-nav">
	<div class="primary-nav-left">
		<h1>@_pageService.Page?.Title</h1>
	</div>
	<div class="primary-nav-right">
		<LoginDisplay />
		<AuthorizeView Context="authContext">
			<Authorized>
				<button @onclick="ShowBackgroundDesigner">Edit Background</button>
			</Authorized>
		</AuthorizeView>
	</div>
</nav>
<div class="content-container">
	@if(_pageService.Page == null)
	{
		<article class="card">
			<p><em>Loading...</em></p>
		</article>
	}
	else
	{
		@foreach (var post in _pageService.Page.Posts)
		{
			<ContentSection post="@post"></ContentSection>
		}
	}
	<button @onclick="() => _pageService.AddPost(PostTypeEnum.JumboBanner)">Add Jumbo Banner</button>
	<button @onclick="() => _pageService.AddPost(PostTypeEnum.Text)">Add Post</button>

	@(JsonSerializer.Serialize(_pageService.Page, new JsonSerializerOptions() { WriteIndented = true }))
	
</div>

@code {
	[Parameter]
	public string? UniqueName { get; set; }
	private string _backgroundMeshCss { get; set; } = string.Empty;
	private bool _showBackgroundDesigner { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		_pageService.OnStateChange += StateHasChanged;
		if (UniqueName != null)
		{
			try
			{
				await _pageService.Get(UniqueName);

				if (_pageService.Page != null)
				{
					if (_pageService.Page?.Style?.BackgroundType == BackgroundTypeEnum.Mesh && _pageService.Page?.Style?.BackgroundMesh != null)
						_backgroundMeshCss = BackgroundMeshToCss.GetBackgroundMeshCss(_pageService.Page.Style.BackgroundMesh);
				}
			}
			catch (AccessTokenNotAvailableException exception)
			{
				exception.Redirect();
			}
		}
		else
		{
			NavManager.NavigateTo("/start");
		}
	}

	public void SelectPost(Post post)
	{
		_pageService.SelectedPost = post;
		StateHasChanged();
	}



	public void ShowBackgroundDesigner()
	{
		_showBackgroundDesigner = true;
	}
	public async void HideBackgroundDesigner(BackgroundMesh backgroundMesh)
	{
		_showBackgroundDesigner = false;

		if (_pageService.Page.Style == null)
		{
			_pageService.Page.Style = new Style();
		}
		_pageService.Page.Style.BackgroundType = BackgroundTypeEnum.Mesh;
		_pageService.Page.Style.BackgroundMesh = backgroundMesh;

		await _pageService.Save();
		_backgroundMeshCss = BackgroundMeshToCss.GetBackgroundMeshCss(backgroundMesh);
		StateHasChanged();
	}


}