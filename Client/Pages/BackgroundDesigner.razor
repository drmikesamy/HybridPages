@page "/settings/backgrounddesigner/{UniqueName}"

@using HybridPages.Client.State;
@using HybridPages.Shared.Helpers;
@using HybridPages.Shared.Models.Styling;
@using HybridPages.Shared.Models;
@inject DOMElements DOMElements;
@inject PageService _pageService

<div class="background-designer" style="@backgroundCss" @onmousemove="(args) => MouseMove(args)" @onmouseup="(args) => MouseUp(args)" @onmousedown="MouseDown">

	<div class="fixed-debug">
	</div>

	<button @onclick="() => SelectColourPoint(_pageService.Page.Style.BackgroundMesh.ColourPoints.Where(cp => cp.IsBackground).First())" class="fixed-button-bottom-right @(_pageService.Page.Style.BackgroundMesh.ColourPoints.Where(cp => cp.IsBackground).First() == _colourPoint ? "draggable-circle-highlighted" : "")">Edit BG</button>

	@foreach (var colourPoint in _pageService.Page.Style.BackgroundMesh.ColourPoints.Where(cp => cp.IsBackground == false))
	{
		<div @onmousedown="() => SelectColourPoint(colourPoint)" @onmousedown:preventDefault="true" class="draggable-circle @(colourPoint == _colourPoint ? "draggable-circle-highlighted" : "")" style="background-color: hsl(@colourPoint.H, @colourPoint.S%, @colourPoint.L%, @colourPoint.A%); left: @(colourPoint.HPosAbs-10)px; top: @(colourPoint.VPosAbs-10)px">
		</div>
	}
	@if (_colourPoint != null)
	{
		<div class="colour-settings" @onmousedown="() => ColourSettingsActive(true)" @onmouseup="() => ColourSettingsActive(false)">
			<div class="slider-row">
				<div class="slider-label">
					H
				</div>
				<div class="slider-component">
					<input type="range" id="h" class="slider-hue" name="h" min="0" max="360" @bind-value="_colourPoint.H" @bind-value:event="oninput">
				</div>
				<div class="slider-value">
					@_colourPoint.H
				</div>
			</div>
			<div class="slider-row">
				<div class="slider-label">
					S
				</div>
				<div class="slider-component">
					<input type="range" id="s" name="s" class="slider-saturation" style="background: linear-gradient(to right, hsla(@(_colourPoint.H), 0%, 50%, 1), hsla(@(_colourPoint.H), 100%, 50%, 1))" min="0" max="100" @bind-value="_colourPoint.S" @bind-value:event="oninput">
				</div>
				<div class="slider-value">
					@_colourPoint.S
				</div>
			</div>
			<div class="slider-row">
				<div class="slider-label">
					L
				</div>
				<div class="slider-component">
					<input type="range" id="l" class="slider-lightness" style="background: linear-gradient(to right, hsla(@(_colourPoint.H), 100%, 0%, 1), hsla(@(_colourPoint.H), 100%, 50%, 1), hsla(@(_colourPoint.H), 100%, 100%, 1))" name="l" min="0" max="100" @bind-value="_colourPoint.L" @bind-value:event="oninput">
				</div>
				<div class="slider-value">
					@_colourPoint.L
				</div>
			</div>
			<div class="slider-row">
				<div class="slider-label">
					A
				</div>
				<div class="slider-component">
					<input type="range" id="a" name="a" min="0" max="1" @bind-value="_colourPoint.A" step="0.01" @bind-value:event="oninput">
				</div>
				<div class="slider-value">
					@_colourPoint.A
				</div>
			</div>
			<div class="layer-row">
				Foreground / Background:
			</div>
			<div class="slider-row">
				<div class="slider-label">
				</div>
				<div class="slider-component">
					<input type="range" id="layerHeight" name="layerHeight" min="1" max="7" @bind-value="_colourPoint.LayerHeight" @bind-value:event="oninput" step="0.0001">
				</div>
				<div class="slider-value">
				</div>
			</div>
		</div>
	}
</div>


