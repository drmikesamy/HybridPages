// <auto-generated />
using System;
using HybridPages.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HybridPages.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240530163625_support chained rows with guid")]
    partial class supportchainedrowswithguid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("boolean");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("HybridPages.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserProfileId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Font", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FontFace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FontPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fonts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FontFace = "Open Sans",
                            FontPath = "/css/fonts/open-sans/OpenSans-Regular.ttf",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FontFace = "Arsenal",
                            FontPath = "/css/fonts/arsenal/Arsenal-Regular.ttf",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.InputField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InputFieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InputFields", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.InputFieldAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InputFieldAttributeType")
                        .HasColumnType("integer");

                    b.Property<long?>("InputFieldId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputFieldAttribute");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.Types.InputFieldAttributeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InputFieldAttributeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AttributeName = "accept",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            AttributeName = "capture",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            AttributeName = "multiple",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            AttributeName = "alt",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            AttributeName = "formaction",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            AttributeName = "formenctype",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            AttributeName = "formmethod",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            AttributeName = "formnovalidate",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            AttributeName = "formtarget",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            AttributeName = "height",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            AttributeName = "src",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            AttributeName = "width",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            AttributeName = "checked",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14L,
                            AttributeName = "required",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15L,
                            AttributeName = "popovertarget",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16L,
                            AttributeName = "popovertargetaction",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17L,
                            AttributeName = "dirname",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18L,
                            AttributeName = "autocapitalize",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19L,
                            AttributeName = "autocomplete",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20L,
                            AttributeName = "list",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21L,
                            AttributeName = "maxlength",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22L,
                            AttributeName = "minlength",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23L,
                            AttributeName = "pattern",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24L,
                            AttributeName = "placeholder",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25L,
                            AttributeName = "readonly",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26L,
                            AttributeName = "size",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27L,
                            AttributeName = "minlength",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28L,
                            AttributeName = "min",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29L,
                            AttributeName = "step",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.Types.InputFieldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InputFieldTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "file"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "image"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "checkbox"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "radio"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "submit"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "button"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "hidden"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "text"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "search"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "url"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "tel"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "email"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "password"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "number"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "range"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "date"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "month"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "week"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "time"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "datetime-local"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tag = "color"
                        });
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StyleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.PageMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageMeta", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChainedRow")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StyleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("StyleId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.PostMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostMeta", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Style", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColour")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("text");

                    b.Property<long?>("BackgroundMeshId")
                        .HasColumnType("bigint");

                    b.Property<int>("BackgroundType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeadingFontColour")
                        .HasColumnType("text");

                    b.Property<long?>("HeadingFontFaceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParagraphFontColour")
                        .HasColumnType("text");

                    b.Property<long?>("ParagraphFontFaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundMeshId");

                    b.HasIndex("HeadingFontFaceId");

                    b.HasIndex("ParagraphFontFaceId");

                    b.ToTable("Styles", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Styling.BackgroundMesh", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BackgroundMeshes", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Styling.ColourPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("A")
                        .HasColumnType("real");

                    b.Property<int>("Alpha")
                        .HasColumnType("integer");

                    b.Property<long>("BackgroundMeshId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("H")
                        .HasColumnType("integer");

                    b.Property<int>("HPosAbs")
                        .HasColumnType("integer");

                    b.Property<int>("HPosPercent")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBackground")
                        .HasColumnType("boolean");

                    b.Property<int>("L")
                        .HasColumnType("integer");

                    b.Property<float>("LayerHeight")
                        .HasColumnType("real");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("S")
                        .HasColumnType("integer");

                    b.Property<int>("VPosAbs")
                        .HasColumnType("integer");

                    b.Property<int>("VPosPercent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundMeshId");

                    b.ToTable("ColourPoints", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("HybridPages.Shared.Models.UserProfileMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileMeta", (string)null);
                });

            modelBuilder.Entity("InputFieldAttributeTypeInputFieldType", b =>
                {
                    b.Property<long>("InputFieldAttributeTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("InputFieldTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("InputFieldAttributeTypeId", "InputFieldTypeId");

                    b.HasIndex("InputFieldTypeId");

                    b.ToTable("InputFieldAttributeTypeInputFieldType");

                    b.HasData(
                        new
                        {
                            InputFieldAttributeTypeId = 1L,
                            InputFieldTypeId = 1L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 2L,
                            InputFieldTypeId = 1L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 3L,
                            InputFieldTypeId = 1L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 4L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 5L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 6L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 7L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 8L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 9L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 10L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 11L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 12L,
                            InputFieldTypeId = 2L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 13L,
                            InputFieldTypeId = 3L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 3L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 13L,
                            InputFieldTypeId = 4L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 4L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 5L,
                            InputFieldTypeId = 5L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 6L,
                            InputFieldTypeId = 5L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 7L,
                            InputFieldTypeId = 5L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 8L,
                            InputFieldTypeId = 5L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 9L,
                            InputFieldTypeId = 5L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 15L,
                            InputFieldTypeId = 6L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 16L,
                            InputFieldTypeId = 6L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 7L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 18L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 22L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 23L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 26L,
                            InputFieldTypeId = 8L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 18L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 9L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 22L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 23L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 26L,
                            InputFieldTypeId = 10L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 22L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 23L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 26L,
                            InputFieldTypeId = 11L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 17L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 22L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 23L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 26L,
                            InputFieldTypeId = 12L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 21L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 22L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 23L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 26L,
                            InputFieldTypeId = 13L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 24L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 14L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 15L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 16L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 17L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 18L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 19L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 19L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 27L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 28L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 25L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 14L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 29L,
                            InputFieldTypeId = 20L
                        },
                        new
                        {
                            InputFieldAttributeTypeId = 20L,
                            InputFieldTypeId = 21L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HybridPages.Server.Models.ApplicationUser", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.InputFieldAttribute", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Forms.InputField", null)
                        .WithMany("InputAttributeValues")
                        .HasForeignKey("InputFieldId");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Page", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.HasOne("HybridPages.Shared.Models.UserProfile", null)
                        .WithMany("Pages")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Style");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.PageMeta", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Page", null)
                        .WithMany("PageMeta")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Post", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Page", null)
                        .WithMany("Posts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HybridPages.Shared.Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.PostMeta", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Post", null)
                        .WithMany("PostMeta")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Style", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Styling.BackgroundMesh", "BackgroundMesh")
                        .WithMany()
                        .HasForeignKey("BackgroundMeshId");

                    b.HasOne("HybridPages.Shared.Models.Font", "HeadingFontFace")
                        .WithMany()
                        .HasForeignKey("HeadingFontFaceId");

                    b.HasOne("HybridPages.Shared.Models.Font", "ParagraphFontFace")
                        .WithMany()
                        .HasForeignKey("ParagraphFontFaceId");

                    b.Navigation("BackgroundMesh");

                    b.Navigation("HeadingFontFace");

                    b.Navigation("ParagraphFontFace");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Styling.ColourPoint", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Styling.BackgroundMesh", null)
                        .WithMany("ColourPoints")
                        .HasForeignKey("BackgroundMeshId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HybridPages.Shared.Models.UserProfileMeta", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.UserProfile", null)
                        .WithMany("UserMeta")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("InputFieldAttributeTypeInputFieldType", b =>
                {
                    b.HasOne("HybridPages.Shared.Models.Forms.Types.InputFieldAttributeType", null)
                        .WithMany()
                        .HasForeignKey("InputFieldAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HybridPages.Shared.Models.Forms.Types.InputFieldType", null)
                        .WithMany()
                        .HasForeignKey("InputFieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HybridPages.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HybridPages.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HybridPages.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HybridPages.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Forms.InputField", b =>
                {
                    b.Navigation("InputAttributeValues");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Page", b =>
                {
                    b.Navigation("PageMeta");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Post", b =>
                {
                    b.Navigation("PostMeta");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.Styling.BackgroundMesh", b =>
                {
                    b.Navigation("ColourPoints");
                });

            modelBuilder.Entity("HybridPages.Shared.Models.UserProfile", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("UserMeta");
                });
#pragma warning restore 612, 618
        }
    }
}
